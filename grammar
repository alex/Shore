input = (NEWLINE | statement)*
statement = simple_statement | compound_statement
simple_statement = expression | declaration | assignment_statement | flow_statement |
    import_statement
expression = TRUE | FALSE | NONE | expression PLUS expression | expression MINUS expression |
    expression STAR expression | expression SLASH expression | expression STAR STAR expression |
    expression VBAR expression | expression AMPER expression | LPAR expression RPAR |
    expression DOT NAME | expression LSQB expression RSQB | expression PERCENT expression |
    NOT expression | TILDE expression | expression AND expression | expression OR expression |
    expression CIRCUMFLEX expression | function_call | literal | atom | name
literal = string | NUMBER | NUMBER DOT [NUMBER] | [NUMBER] DOT NUMBER
declaration = type NAME EQUAL expression
type = NAME | NAME LESS type GREATER
assignment_statement = NAME (EQUAL NAME)* EQUAL expression
flow_statement = BREAK | PASS | CONTINUE | return_statement | raise_statement | yield_statement
return_statement = RETURN expression
raise_statement = RAISE expression
yield_statement = YIELD expression
import_statement = FROM dotted_name IMPORT NAME (COMMA NAME)* | IMPORT dotted_name
dotted_name = NAME (DOT NAME)*
compound_statement = if_statement | while_statement | for_statement | function_defintion |
    class_definition | decorated
if_statement = IF expression COLON suite (ELIF expression COLON suite)* [else COLON suite]
while_statement = WHILE expression COLON suite
for_statement = FOR NAME IN expression COLON suite
suite = NEWLINE INDENT statement+ DEDENT
function_definition = [type] DEF[LESS NAME (COMMA NAME)* GREATER] NAME parameters COLON suite
class_definition = CLASS[LESS NAME (COMMA NAME)* GREATER] NAME LPAR NAME (COMMA NAME)* RPAR) COLON suite
decorated = decorators (classdef | functiondef)
decorators = decorator+
decorator = AT dotted_name [LPAR arglist RPAR] NEWLINE
parameters = LPAR (type NAME [EQUAL expression])* RPAR
function_call = expression LPAR arglist RPAR
arglist = (argument COMMA)* [argument [COMMA]]
argument = expression | NAME EQUAL expression
atom = tuple | list | dict | set
tuple = expression COMMA (expression COMMA)* [expression [COMMA]] | LPAR RPAR
list = LSQB (expression COMMA)* [expression [COMMA]] RSQB
dict = LBRACE (expression COLON expression COMMA)* [expression COLON expression [COMMA]] RBRACE
set = LBRACE expression COMMA (expression COMMA)* [expression [COMMA]] RBRACE
